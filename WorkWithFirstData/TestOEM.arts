#DEFINITIONS:  -*-sh-*-
#
# Author: Patrick Eriksson

Arts2 {

INCLUDE "general/general.arts"
INCLUDE "general/continua.arts"
INCLUDE "general/agendas.arts"
INCLUDE "general/planet_earth.arts"

# Agendas to use
#
Copy( abs_xsec_agenda,            abs_xsec_agenda__noCIA              )
Copy( propmat_clearsky_agenda,    propmat_clearsky_agenda__OnTheFly   )
Copy( iy_main_agenda,             iy_main_agenda__Emission            )
Copy( iy_space_agenda,            iy_space_agenda__CosmicBackground   )
Copy( iy_surface_agenda,          iy_surface_agenda__UseSurfaceRtprop )
Copy( ppath_agenda,               ppath_agenda__FollowSensorLosPath   )
Copy( ppath_step_agenda,          ppath_step_agenda__GeometricPath    )


# Basic settings
#
AtmosphereSet1D
IndexSet( stokes_dim, 1 )


# Frequency and pressure grids
#
NumericCreate( f_start )
NumericCreate( f_end )
IndexCreate( nf )
VectorCreate( p_ret_grid )
IndexCreate( np )
#
NumericSet( f_start, 110.436e9 )
NumericSet( f_end, 111.236e9 )
IndexSet( nf, 801 )
IndexSet( np, 81 )
#
VectorNLinSpace( f_grid, nf, f_start, f_end )
VectorNLogSpace( p_grid,    361, 500e2, 0.1 )
VectorNLogSpace( p_ret_grid, np, 500e2, 0.1 )


# Spectroscopy
#
abs_speciesSet( species=[ "O3" ] )
#
ArrayOfLineshapeSpecCreate( abs_lineshapeDefine )
abs_lineshapeDefine( abs_lineshapeDefine, "Voigt_Kuntz6", "VVH", 750e9 )
#
ReadXML( abs_lines, "testdata/ozone_line.xml" )
#ReadXML( abs_lines, "abs_lines.xml" )
abs_lines_per_speciesCreateFromLines



# Atmosphere (a priori)
#
AtmRawRead( basename = "testdata/tropical" )
AtmFieldsCalc
#
MatrixSetConstant( z_surface, 1, 1, 10e3 )
#
VectorSet( lat_true, [10] )
VectorSet( lon_true, [123] )
#
atmfields_checkedCalc


# Apply HSE
#
NumericSet( p_hse, 100e2 )
NumericSet( z_hse_accuracy, 0.5 )
#
z_fieldFromHSE


# RT
#
NumericSet( ppath_lmax, -1 )
StringSet( iy_unit, "RJBT" )
#
MatrixSetConstant( sensor_pos, 1, 1, 15e3 )
MatrixSetConstant( sensor_los, 1, 1, 60 )
#
VectorSetConstant( sensor_time, 1, 0 )


# Deactive parts not used and perform all remaining tests
#
jacobianOff
cloudboxOff
sensorOff
#
abs_xsec_agenda_checkedCalc
propmat_clearsky_agenda_checkedCalc
atmgeom_checkedCalc
sensor_checkedCalc


# Covariance matrices covmat_sx, covmat_se and their inverse.
#
# Define Jacobian
#


retrievalDefInit
VectorCreate(vars)
nelemGet( nelem, p_ret_grid )



 retrievalAddAbsSpecies(
     species = "O3",
     unit = "vmr",
     g1 = p_ret_grid,
     g2 = lat_grid,
     g3 = lon_grid
 )

retrievalAddTemperature (
   g1 = p_ret_grid,
   g2 = lat_grid,
   g3 = lon_grid,
   hse = "off"   )

SparseCreate(sparse_block)

 VectorSetConstant(vars, nelem, 1e-12)
 DiagonalMatrix(sparse_block, vars)
 covmat_sxAddBlock(block = sparse_block)

VectorSetConstant(vars, nelem, 0.1)
DiagonalMatrix(sparse_block, vars)
covmat_sxAddBlock(block = sparse_block)



VectorSetConstant(vars, nf, 1e-2)
DiagonalMatrix(sparse_block, vars)
covmat_seAddBlock(block = sparse_block)

MatrixCreate(dense_block)
VectorSetConstant(vars, nf, 1e+2)
DiagonalMatrix(dense_block, vars)
covmat_seAddInverseBlock(block = dense_block)

retrievalDefClose

# Simulate "measurement vector"
#
cloudbox_checkedCalc
yCalc



# Iteration agenda
#
AgendaSet( inversion_iterate_agenda ){

  Ignore(inversion_iteration_counter)
  # Map x to ARTS' variables
  x2artsStandard

  # To be safe, rerun checks dealing with the atmosphere
  atmfields_checkedCalc
  atmgeom_checkedCalc

  # Calculate yf and Jacobian matching x.
  yCalc( y=yf )

  # Add baseline term
  VectorAddVector( yf, yf, y_baseline )

  # This method takes cares of some "fixes" that are needed to get the Jacobian
  # right for iterative solutions. No need to call this WSM for linear inversions.
  jacobianAdjustAndTransform
}


# Let a priori be off with 1 ppm
#
Tensor4AddScalar( vmr_field, vmr_field, 1e-6 )


# Create xa
#
xaStandard

# x, jacobian and yf must be initialised (or pre-calculated as shown below)
#
VectorSet( x, [] )
VectorSet( yf, [] )
MatrixSet( jacobian, [] )


# Or to pre-set x, jacobian and yf
#
#Copy( x, xa )
#MatrixSet( jacobian, [] )
#AgendaExecute( inversion_iterate_agenda )

# Run OEM
OEM(method="gn",
    max_iter=5,
    display_progress=1,
    lm_ga_settings=[10,2,2,100,1,99])
#
Print( oem_errors, 0 )

# Compute averaging kernel matrix
#
avkCalc

# Compute smoothing error covariance matrix
#
covmat_ssCalc

# Compute observation system error covariance matrix
#
covmat_soCalc

# Extract observation errors
#
retrievalErrorsExtract


}
