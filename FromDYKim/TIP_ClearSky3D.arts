#DEFINITIONS:  -*-sh-*-
#
# Demonstration and test of simple ARTS 1D, 2D and 3D clear sky calculations.
#
# Observations from a satellite is treated, with three viewing directions:
#   1: Cold space (ie. above the model atmosphere)
#   2: Limb sounding
#   3: Downward observation.
#
# For the test sequence (ie. "make check") this is a first test on that the
# full chain around yCalc is working. Calculation of optical depth as an
# auxilary variable is included and tested.
#
# Author: Patrick Eriksson


Arts2 {

INCLUDE "general/general.arts"
INCLUDE "general/continua.arts"
INCLUDE "general/agendas.arts"
INCLUDE "general/planet_earth.arts"

# Agenda for scalar gas absorption calculation
Copy(abs_xsec_agenda, abs_xsec_agenda__noCIA)

# (standard) emission calculation
Copy( iy_main_agenda, iy_main_agenda__Emission )

# cosmic background radiation
Copy( iy_space_agenda, iy_space_agenda__CosmicBackground )

# standard surface agenda (i.e., make use of surface_rtprop_agenda)
Copy( iy_surface_agenda, iy_surface_agenda__UseSurfaceRtprop )

# Planck as blackbody radiation
Copy( blackbody_radiation_agenda, blackbody_radiation_agenda__Planck )

# on-the-fly absorption
Copy( propmat_clearsky_agenda, propmat_clearsky_agenda__OnTheFly )

# sensor-only path
Copy( ppath_agenda, ppath_agenda__FollowSensorLosPath )

# no refraction
Copy( ppath_step_agenda, ppath_step_agenda__GeometricPath )

output_file_formatSetBinary 

#### LOAD DATA: these files were created with MCDataPrepare.arts ######

ReadXML( f_grid, "../DAIO//f_grid.xml" )
#VectorSet( f_grid, [55.5e9] ) 
#VectorSet( f_grid, [18.700e9, 22.235e9,
#                    37.000e9, 40.000e9,
#                    50.300e9, 52.300e9, 53.600e9, 54.550e9,
#                    55.750e9, 57.000e9, 58.400e9, 59.800e9 ] ) 

IndexSet( f_index, 0 )

ReadXML( p_grid, "../DAIO/p_grid.xml" )

AtmosphereSet3D

ReadXML( lat_grid, "../DAIO/lat_grid.xml" )

ReadXML( lon_grid, "../DAIO/lon_grid.xml" )

ReadXML( t_field, "../DAIO/t_field.xml" )

ReadXML( z_field, "../DAIO/z_field.xml" )

ReadXML( t_surface, "../DAIO/t_surface.xml" )

#abs_speciesSet( species=
#            ["H2O-SelfContStandardType, H2O-ForeignContStandardType, H2O", 
#             "N2-SelfContStandardType",
#             "O3",
#             "O2-SelfContStandardType"] ) 
abs_speciesSet( species=
            ["H2O-PWR98", 
             "N2-SelfContStandardType",
             "O3",
             "O2-PWR98"] ) 

abs_lines_per_speciesSetEmpty

#AtmRawRead( basename="testdata/tropical" ) 
AtmRawRead( basename="../DAIO/tropical" ) 

AtmFieldsCalcExpand1D 

WriteXML( output_file_format, vmr_field, "../DAIO/vmr_field.xml" ) 

nelemGet( nrows, lat_grid )

nelemGet( ncols, lon_grid )

MatrixSetConstant( z_surface, nrows, ncols, 0.0 )

WriteXML( output_file_format, z_surface, "../DAIO/z_surface.xml" ) 

abs_xsec_agenda_checkedCalc
atmfields_checkedCalc
abs_lookupSetup
abs_lookupCalc
WriteXML( output_file_format, abs_lookup, "../DAIO/gas_abs_lookup.xml" ) 

abs_lookupAdapt 


# Number of Stokes components to be computed
#
IndexSet( stokes_dim, 1 )

# Clearsky = No scattering
#
cloudboxOff

# No jacobian calculation
#
jacobianOff


# Weakly reflecting surface
# ---
VectorSetConstant( surface_scalar_reflectivity, 1, 0.05 )
Copy( surface_rtprop_agenda,
      surface_rtprop_agenda__Specular_NoPol_ReflFix_SurfTFromt_surface )

# No sensor properties
# ---
sensorOff


# We select here to use Rayleigh-Jean brightness temperatures
# ---
StringSet( iy_unit, "RJBT" )
#StringSet( iy_unit, "PlanckBT" )


# Extract radiative background and optical depth as auxiliary variables
# ---
#ArrayOfStringSet( iy_aux_vars, [ "Optical depth", "Radiative background" ] )
# Create vector container for the optical depth
#VectorCreate( odepth )


# Definition of sensor position and LOS
# ---
#MatrixSet( sensor_pos, [20e3, 36.77661,126.49391 ;
#                        20e3, 36.77661,126.49391 ;
#                         2e3, 36.77661,126.49391 
#                         ])
#MatrixSet( sensor_los, [ 0, 90; 12, 90; 12, 90] ) 
#MatrixSet( sensor_pos, [2e3, 36.77661,126.49391])
#MatrixSet( sensor_los, [ 0, 90] ) 

ReadXML( sensor_los, "../DAIO/sensor_los.xml" )
ReadXML( sensor_pos, "../DAIO/sensor_pos.xml" )

Print( sensor_pos, 1 )

Print( sensor_los, 1 )
 
# Perform RT calculations
# ---
abs_xsec_agenda_checkedCalc
propmat_clearsky_agenda_checkedCalc
atmfields_checkedCalc
atmgeom_checkedCalc
cloudbox_checkedCalc
sensor_checkedCalc
yCalc


# OK?
# ---
#Extract( odepth, y_aux, 0 )
WriteXML( "ascii", y, "TIP_ClearSky3D.xml" )


} # End of Main
 
